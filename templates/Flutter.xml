<templateSet group="Flutter">
  <template name="ld" value="this.log.dd(()=&gt;&quot;$END$&quot;);" description="ld" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="main" value="main(){&#10;    $end$&#10;}" description="main" toReformat="false" toShortenFQNames="true">
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="mains" value="main() async {&#10;    await $end$&#10;}" description="main" toReformat="false" toShortenFQNames="true">
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="exon" value="extension $VAR0$Ext on $VAR0$ {&#10;    $END$&#10;}" description="extension" toReformat="false" toShortenFQNames="true">
    <variable name="VAR0" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="pp" value="print(&quot;hint $uniq$ $method$&quot;);" description="logger dd" toReformat="true" toShortenFQNames="true">
    <variable name="uniq" expression="time()" defaultValue="" alwaysStopAt="true" />
    <variable name="method" expression="dartClassNameMethodName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="trfn" value="throw FnException($END$);" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="fnPage" value="import 'package:h_foundation/h_foundation.dart';&#10;import 'package:meno_flow/include/widget.dart';&#10;import 'package:meno_flow/include/controller.dart';&#10;import 'package:flutter/material.dart';&#10;import 'package:get/get.dart';&#10;import 'package:meno_flow/utils/function.dart';&#10;&#10;class _$widgetName$Controller extends GetxController {}&#10;&#10;class $widgetName$Page extends DisposeGetView&lt;_$widgetName$Controller&gt; {&#10;  static void to() {&#10;    Get.to(() =&gt; SearchPagePage._());&#10;  }&#10;  const $widgetName$Page._({super.key});&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      body: Placeholder(),&#10;    );&#10;  }&#10;&#10;  @override&#10;  _$widgetName$Controller supplier() =&gt; _$widgetName$Controller();&#10;&#10;  @override&#10;  String get tag =&gt; &quot;&quot;;&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="widgetName" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="log" value="late final log = LoggerWrapper(logger, this.runtimeType.toString());" description="logger" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="td" value="// todo by chenhao $END$" description="todo by chenhao" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="absclass" value="abstract class $Var1$$END$ {&#10;}" description="absclass" toReformat="false" toShortenFQNames="true">
    <variable name="Var1" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="staticmethod" value="static void $END$() {&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="getservice" value="class $VAR$$END$ extends GetxService{&#10;  @override&#10;  void onReady() {&#10;    // TODO: implement onReady&#10;    super.onReady();&#10;  }&#10;  @override&#10;  void onInit() {&#10;    // TODO: implement onInit&#10;    super.onInit();&#10;  }&#10;  @override&#10;  void onClose() {&#10;    // TODO: implement onClose&#10;    super.onClose();&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="instance" value="static $ClassName$ get instance =&gt; Get.touch(() =&gt; $ClassName$$END$());" description="" toReformat="false" toShortenFQNames="true">
    <variable name="ClassName" expression="dartClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="staticcreate" value="static $Class$ build$END$() {&#10;    return $Class$($END$);&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Class" expression="dartClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="wip" value="FnNotification.wip()" description="wip" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="main.min" value="mainAxisSize: MainAxisSize.min," description="mainAxisSize: MainAxisSize.min," toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="stless" value="import 'package:flutter/cupertino.dart';&#10;&#10;class $NAME$ extends StatelessWidget {&#10;  const $NAME$({super.key});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return const Placeholder($END$);&#10;  }&#10;}&#10;" description="New Stateless widget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="stful" value="import 'package:flutter/cupertino.dart';&#10;&#10;class $NAME$ extends StatefulWidget {&#10;  const $NAME$({super.key});&#10;&#10;  @override&#10;  State&lt;$NAME$&gt; createState() =&gt; $SNAME$();&#10;}&#10;&#10;class $SNAME$ extends State&lt;$NAME$&gt; {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return const Placeholder($END$);&#10;  }&#10;}&#10;" description="New Stateful widget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SNAME" expression="regularExpression(concat(&quot;_&quot;, NAME, &quot;State&quot;), &quot;^__&quot;, &quot;_&quot;)" defaultValue="" alwaysStopAt="false" />
    <context />
  </template>
  <template name="stalessWithoutImport" value="class $NAME$ extends StatelessWidget {&#10;  const $NAME$({super.key});&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return const Placeholder($END$);&#10;  }&#10;}&#10;" description="New Stateless widget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="widget_function" value="Widget $END$$VAR$() {&#10;return Text(&quot;$VAR$&quot;);&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="future" value="$END$$VAR2$ Completer _$VAR1$completer = Completer();&#10;$END$$VAR2$ Future get $VAR1$future =&gt; _$VAR1$completer.future;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="VAR2" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR1" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="futureBuilder" value="FutureBuilder(&#10;future: $VAR1$,&#10;builder: (context, snap) {&#10;   if(snap.data==null){&#10;       return emptywidget;&#10;   }&#10;   $END$&#10;});" description="" toReformat="false" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="18" value=".i18n" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="le" value="this.log.e(&quot;$END$&quot;,e);" description="log.e" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="try" value="try{&#10;    $VAR1$&#10;}catch(e){&#10;    this.log.e(&quot;$END$&quot;,e);&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="VAR1" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="dl" value="DebugUtils.log(&quot;$FILE_NAME$:$FILE_NUM$$END$ \n${StackTrace.current}&quot;);" description="" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <variable name="FILE_NUM" expression="lineNumber()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="_sub" value="late final StreamSubscription _sub;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="getxcontoller" value="import 'package:get/get.dart';&#10;&#10;class $END$Controller extends GetxController {&#10;&#10;  @override&#10;  void onInit() {&#10;    super.onInit();&#10;  }&#10;&#10;  @override&#10;  void onClose() {&#10;    super.onClose();&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="getxcontollerwithoutImport" value="class $END$Controller extends GetxController {&#10;&#10;  @override&#10;  void onInit() {&#10;    super.onInit();&#10;  }&#10;&#10;  @override&#10;  void onClose() {&#10;    super.onClose();&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="getxcontollersimple" value="class $END$Controller extends GetxController {&#10;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="txtoverflow" value="overflow: TextOverflow.ellipsis," description="overflow: TextOverflow.ellipsis," toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="inh2" value="class $CLASS$$END$ extends InheritedWidget {&#10;  const $CLASS$({&#10;    super.key,&#10;    required Widget child,&#10;  }) : super(child: child);&#10;&#10;  static $CLASS$ of(BuildContext context) {&#10;    final $CLASS$? result = mayBeOf(context);&#10;    assert(result != null, 'No $CLASS$ found in context');&#10;    return result!;&#10;  }&#10;&#10;  static $CLASS$? mayBeOf(BuildContext context) {&#10;    return context.dependOnInheritedWidgetOfExactType&lt;$CLASS$&gt;();&#10;  }&#10;&#10;  @override&#10;  bool updateShouldNotify($CLASS$ old) {&#10;    return true;&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
      <option name="FLUTTER_GENERATOR_SNIPPETS" value="true" />
    </context>
  </template>
  <template name="li" value="this.log.i(&quot;$END$&quot;);" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="animatedBldr" value="AnimatedBuilder(&#10;  animation: $animationController$,&#10;  child: $childWidget$,&#10;  builder: (BuildContext context, Widget child) {&#10;    return $buildWidget$;&#10;  },&#10;);" description="New AnimatedBuilder" toReformat="true" toShortenFQNames="true">
    <variable name="animationController" expression="&quot;animationController&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="childWidget" expression="&quot;childWidget&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="buildWidget" expression="&quot;buildWidget&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="customScrollV" value="CustomScrollView(&#10;slivers: &lt;Widget&gt;[&#10;$childWidget1$,&#10;$childWidget2$,&#10;$childWidget3$,&#10;],&#10;)," description="New CustomScrollView" toReformat="true" toShortenFQNames="true">
    <variable name="childWidget1" expression="&quot;childWidget1&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="childWidget2" expression="&quot;childWidget2&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="childWidget3" expression="&quot;childWidget3&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="futureBldr" value="FutureBuilder(&#10;    future: $FUTURE$,&#10;    builder: (BuildContext context, AsyncSnapshot snapshot) {&#10;        if (snapshot.hasData) {&#10;            return $WIDGET$;&#10;        } else if (snapshot.hasError) {&#10;            return $ERRORWIDGET$&#10;        } else {&#10;            return $LOADINGWIDGET$&#10;        }&#10; })" description="Create FutureBuilder" toReformat="true" toShortenFQNames="true">
    <variable name="FUTURE" expression="&quot;future&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="WIDGET" expression="&quot;widgetToBuild&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="ERRORWIDGET" expression="&quot;Icon(Icons.error_outline);&quot;" defaultValue="&quot;Icon(Icons.error_outline),&quot;" alwaysStopAt="true" />
    <variable name="LOADINGWIDGET" expression="&quot;CircularProgressIndicator();&quot;" defaultValue="&quot;CircularProgressIndicator()&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="layoutBldr" value="LayoutBuilder(&#10;builder: (BuildContext context, BoxConstraints constraints) {&#10;return $widget$;&#10;},&#10;)," description="New LayoutBuilder" toReformat="true" toShortenFQNames="true">
    <variable name="widget" expression="&quot;widget&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="singleChildSV" value="SingleChildScrollView(&#10;controller: $controller$, // Optional&#10;child: $widget$,&#10;)," description="New SingleChildScrollView" toReformat="true" toShortenFQNames="true">
    <variable name="controller" expression="&quot;controller&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="widget" expression="&quot;widget&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="streamBldr" value="StreamBuilder(&#10;    stream: $STREAM$,&#10;    builder: (BuildContext context, AsyncSnapshot snapshot) {&#10;        if (snapshot.hasData) {&#10;            return $WIDGET$;&#10;        } else if (snapshot.hasError) {&#10;            return $ERRORWIDGET$&#10;        } else {&#10;            return $LOADINGWIDGET$&#10;        }&#10; })" description="Create StreamBuilder" toReformat="true" toShortenFQNames="true">
    <variable name="STREAM" expression="&quot;stream&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="WIDGET" expression="&quot;widgetToBuild&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="ERRORWIDGET" expression="&quot;Icon(Icons.error_outline);&quot;" defaultValue="&quot;Icon(Icons.error_outline),&quot;" alwaysStopAt="true" />
    <variable name="LOADINGWIDGET" expression="&quot;CircularProgressIndicator();&quot;" defaultValue="&quot;CircularProgressIndicator()&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="listviewBldr" value="ListView.builder(itemCount: $COUNT$,itemBuilder: (BuildContext context, int index) {return $WIDGET$;}, )," description="Create ListView.builder" toReformat="true" toShortenFQNames="true">
    <variable name="COUNT" expression="&quot;count&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="WIDGET" expression="&quot;widget&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="showDialog" value="showDialog&lt;void&gt;(&#10;context: $context$,&#10;barrierDismissible: $dismiss$, // false = user must tap button, true = tap outside dialog&#10;builder: (BuildContext dialogContext){&#10;return AlertDialog(&#10;title: Text('$title$'),&#10;content: Text('$content$'),&#10;actions: &lt;Widget&gt;[&#10;TextButton(&#10;child: Text('$buttonText$'),&#10;onPressed: () {&#10;Navigator.of(dialogContext).pop(); // Dismiss alert dialog&#10;},&#10;),&#10;],&#10;);&#10;},&#10;);" description="New AlertDialog" toReformat="true" toShortenFQNames="true">
    <variable name="context" expression="&quot;context&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="dismiss" expression="&quot;barrierDismissible&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="title" expression="&quot;title&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="content" expression="&quot;dialogBody&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="buttonText" expression="&quot;buttonText&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="scfAll" value="int _index = 0; // Make sure this is outside build(), otherwise every setState will chage the value back to 0 &#10;&#10;return Scaffold(&#10;appBar: AppBar(&#10;title: Text('$appbarTitle$'),&#10;),&#10;body: Center(&#10;child: Container(child: Text('You are looking at the message for bottom navigation item $_index')),&#10;),&#10;bottomNavigationBar: BottomNavigationBar(&#10;onTap: (tappedItemIndex)=&gt; setState(() {&#10;_index = tappedItemIndex;&#10;}),&#10;currentIndex: _index,&#10;items: [&#10;BottomNavigationBarItem(icon: Icon(Icons.av_timer), title: Text('$navBarItem1Text$')),&#10;BottomNavigationBarItem(icon: Icon(Icons.add), title: Text('$navBarItem2Text$'))&#10;]),&#10;floatingActionButton: FloatingActionButton(&#10;onPressed: () =&gt; setState(() {&#10;=_index = 0;&#10;}),&#10;tooltip: 'Reset Navigation Index',&#10;        child: Icon(Icons.clear), //Change Icon&#10;),&#10;floatingActionButtonLocation: FloatingActionButtonLocation.endFloat, //Change for different locations&#10;);" description="New Scaffold with AppBar, Fab and Bottom Nav Bar" toReformat="true" toShortenFQNames="true">
    <variable name="appbarTitle" expression="&quot;appbarTitle&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="navBarItem1Text" expression="&quot;navBarItem1Text&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="navBarItem2Text" expression="&quot;navBarItem2Text&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="scfAppBar" value="return Scaffold(&#10;appBar: AppBar(&#10;title: Text('$appbarTitle$'),&#10;),&#10;body: $body$&#10;);" description="New Scaffold with AppBar" toReformat="true" toShortenFQNames="true">
    <variable name="appbarTitle" expression="&quot;appbarTitle&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="body" expression="&quot;bodyWidget&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="scfAppBarFab" value="int _index = 0; // Make sure this is outside build(), otherwise every setState will chage the value back to 0 &#10;&#10;return Scaffold(&#10;appBar: AppBar(&#10;        title: Text('$appbarTitle$'),&#10;),&#10;body: Center(&#10;child: Container(child: Text('You tapped the FAB $_index times')),&#10;),&#10;floatingActionButton: FloatingActionButton(&#10;onPressed: () =&gt; setState(() {&#10;_index++;&#10;}),&#10;tooltip: 'Increment Counter',&#10;child: Icon(Icons.add), //Change Icon&#10;),&#10;floatingActionButtonLocation: FloatingActionButtonLocation.endFloat, //Change for different locations&#10;);" description="New Scaffold with AppBar and Fab" toReformat="true" toShortenFQNames="true">
    <variable name="appbarTitle" expression="&quot;appbarTitle&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="scfAppBarBtmNav" value="int _index = 0; // Make sure this is outside build(), otherwise every setState will change the value back to 0 &#10;&#10;return Scaffold(&#10;appBar: AppBar(&#10;title: Text('$appbarTitle$'),&#10;),&#10;body: Center(&#10;child: Container(child: Text('You are looking at the message for bottom navigation item $_index')),&#10;),&#10;bottomNavigationBar: BottomNavigationBar(&#10;onTap: (tappedItemIndex) =&gt; setState(() {&#10;_index = tappedItemIndex;&#10; }),&#10;currentIndex: _index,&#10;items: [&#10;BottomNavigationBarItem(icon: Icon(Icons.av_timer), title: Text('$navBarItem1Text$')),&#10;BottomNavigationBarItem(icon: Icon(Icons.add), title: Text('$navBarItem2Text$'))&#10;])&#10;);" description="New Scaffold with AppBar &amp; Bottom Nav Bar" toReformat="true" toShortenFQNames="true">
    <variable name="appbarTitle" expression="&quot;appbarTitle&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="navBarItem1Text" expression="&quot;navBarItem1Text&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="navBarItem2Text" expression="&quot;navBarItem2Text&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="statefulBldr" value="StatefulBuilder(&#10;builder: (BuildContext context, StateSetter setState){&#10;return $widget$&#10;}&#10;)," description="New Stateful Builder" toReformat="true" toShortenFQNames="true">
    <variable name="widget" expression="&quot;widget&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="orientationBldr" value="OrientationBuilder(&#10;  builder: (BuildContext context, Orientation orientation) {&#10;return GridView.count(&#10;// Create a grid with 2 columns in portrait mode, or 3 columns in&#10;// landscape mode.&#10;crossAxisCount: orientation == Orientation.portrait ? 2 : 3,&#10;);&#10;},&#10;);" description="New OrientationBuilder" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="importM" value="import 'package:flutter/material.dart';" description="Import Material Package" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="importC" value="import 'package:flutter/cupertino.dart';" description="Import Cupertino Package" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="customClipper" value="class $name$Clipper extends CustomClipper&lt;Path&gt; {&#10;    &#10;@override&#10;Path getClip(Size size) {&#10;// TODO: implement getClip&#10;}&#10;&#10;@override&#10;bool shouldReclip(CustomClipper&lt;Path&gt; oldClipper) {&#10;// TODO: implement shouldReclip&#10;}&#10;}" description="Create CustomClipper" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="&quot;name&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="customPainter" value="class $name$Painter extends CustomPainter {&#10;&#10;@override&#10;void paint(Canvas canvas, Size size) {&#10;//TODO Implement paint&#10;}&#10;&#10;      @override&#10;bool shouldRepaint($name$Painter oldDelegate) {&#10;//TODO Implement shouldRepaint&#10;}&#10;&#10;@override&#10;bool shouldRebuildSemantics($name$Painter oldDelegate) {&#10;//TODO Implement shouldRebuildSemantics&#10;}&#10;}" description="Create CustomPainter" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="&quot;name&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="container" value="Container(&#10;  child: $Widget$(),&#10;)," description="Create Container Widget" toReformat="true" toShortenFQNames="true">
    <variable name="Widget" expression="&quot;Widget&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="row" value="Row(&#10;  children: &lt;Widget&gt;[$goto$],&#10;)," description="Create Row Widget" toReformat="true" toShortenFQNames="true">
    <variable name="goto" expression="&quot;&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="column" value="Column(&#10;  children: &lt;Widget&gt;[$goto$],&#10;)," description="Create Column Widget" toReformat="true" toShortenFQNames="true">
    <variable name="goto" expression="&quot;&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="txt" value="Text('$text$')," description="Create Text Widget" toReformat="true" toShortenFQNames="true">
    <variable name="text" expression="&quot;text&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="aspectRatio" value="AspectRatio(&#10;aspectRatio: $aspectRatio$,&#10;child: $child$&#10;)," description="New AspectRatio Widget" toReformat="true" toShortenFQNames="true">
    <variable name="aspectRatio" expression="$aspectRatio$" defaultValue="" alwaysStopAt="true" />
    <variable name="child" expression="$child$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="cupeApp" value="import 'package:flutter/cupertino.dart';&#10; &#10;void main() =&gt; runApp($className$());&#10; &#10;class $className$ extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return CupertinoApp(&#10;      title: 'Cupertino App',&#10;      home: CupertinoPageScaffold(&#10;        navigationBar: CupertinoNavigationBar(&#10;          middle: Text('Cupertino App Bar'),&#10;        ),&#10;        child: Center(&#10;          child: Container(&#10;            child: Text('Hello World'),&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" description="Create a New Cupertino App" toReformat="true" toShortenFQNames="true">
    <variable name="className" expression="&quot;MyApp&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="mateApp" value="import 'package:flutter/material.dart';&#10; &#10;void main() =&gt; runApp($className$());&#10; &#10;class $className$ extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return MaterialApp(&#10;      title: 'Material App',&#10;      home: Scaffold(&#10;        appBar: AppBar(&#10;          title: Text('Material App Bar'),&#10;        ),&#10;        body: Center(&#10;          child: Container(&#10;            child: Text('Hello World'),&#10;          ),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" description="Create a New Material App" toReformat="true" toShortenFQNames="true">
    <variable name="className" expression="&quot;MyApp&quot;" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="initS" value="@override&#10;void initState() { &#10;  super.initState();&#10;  // Add code after super&#10;}" description="Add initState Override" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="dis" value="@override&#10;void dispose() { &#10;  // Add code before the super&#10;  super.dispose();&#10;}" description="Add dispose Override" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="subj" value="Stream&lt;$type$&gt; get name =&gt; _$nameSubject$.stream; &#10;  final _$nameSubject$ = BehaviorSubject&lt;$type$&gt;();" description="Add BehaviorSubject" toReformat="true" toShortenFQNames="true">
    <variable name="type" expression="$type$" defaultValue="" alwaysStopAt="true" />
    <variable name="nameSubject" expression="$nameSubject$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="toStr" value="@override&#10;String toString() {&#10;return $toString$;&#10;}&#10;" description="To String Override" toReformat="true" toShortenFQNames="true">
    <variable name="toString" expression="$toString$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="strm" value="Stream&lt;$type$&gt; get name =&gt; _$nameController$.stream; &#10;  final _$nameController$ = StreamController&lt;$type$&gt;();" description="StreamController" toReformat="true" toShortenFQNames="true">
    <variable name="type" expression="$type$" defaultValue="" alwaysStopAt="true" />
    <variable name="nameController" expression="$nameController$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="snk" value="Stream&lt;$type$&gt; get name =&gt; _$nameController$.sink; &#10;  final _$nameController$ = StreamController&lt;$type$&gt;();" description="Sink" toReformat="true" toShortenFQNames="true">
    <variable name="type" expression="$type$" defaultValue="" alwaysStopAt="true" />
    <variable name="nameController" expression="$nameController$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="mounted" value="@override &#10; bool get mounted { &#10;$body$&#10;}&#10;" description="Mounted" toReformat="true" toShortenFQNames="true">
    <variable name="body" expression="$body$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="nosm" value="@override &#10; dynamic noSuchMethod(Invocation invocation) { &#10;$body$&#10;}&#10;" description="No Such Method" toReformat="true" toShortenFQNames="true">
    <variable name="body" expression="$body$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="build" value="@override &#10; Widget build(BuildContext context) { &#10; return $body$; &#10;}&#10;" description="No Such Method" toReformat="true" toShortenFQNames="true">
    <variable name="body" expression="$body$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="reassemble" value="@override &#10; void reassemble(){ &#10; super.reassemble(); &#10; $body$ &#10;}&#10;" description="Reassemble" toReformat="true" toShortenFQNames="true">
    <variable name="body" expression="$body$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="didChangeD" value="@override &#10; void didChangeDependencies(){ &#10; super.didChangeDependencies(); &#10; $body$ &#10;}&#10;" description="didChangeDependencies" toReformat="true" toShortenFQNames="true">
    <variable name="body" expression="$body$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="didUpdateW" value="@override &#10; void didUpdateWidget ($Type$ oldWidget) { &#10; super.didChangeDependencies(); &#10; $body$ &#10;}&#10;" description="didUpdateWidget" toReformat="true" toShortenFQNames="true">
    <variable name="body" expression="$body$" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="$Type$" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="tweenAnimationBldr" value="TweenAnimationBuilder( &#10; duration: $duration$, &#10; tween: $tween$, &#10; builder: (BuildContext context, $type$ value, Widget child) { &#10; return  $body$  &#10; }&#10;" description="Tween Animation Builder" toReformat="true" toShortenFQNames="true">
    <variable name="duration" expression="$duration$" defaultValue="const Duration()" alwaysStopAt="true" />
    <variable name="tween" expression="$tween$" defaultValue="Tween()" alwaysStopAt="true" />
    <variable name="type" expression="$type$" defaultValue="dynamic" alwaysStopAt="true" />
    <variable name="body" expression="$body$" defaultValue="Container();" alwaysStopAt="true" />
    <context />
  </template>
  <template name="valueListenableBuilder" value="ValueListenableBuilder( &#10; valueListenable: $duration$, &#10; builder: (BuildContext context, $type$ value, Widget child) { &#10; return  $body$  &#10; }&#10;" description="Value Listenable Builder" toReformat="true" toShortenFQNames="true">
    <variable name="valueListenable" expression="$valueListenable$" defaultValue="null" alwaysStopAt="true" />
    <variable name="type" expression="$type$" defaultValue="dynamic" alwaysStopAt="true" />
    <variable name="body" expression="$body$" defaultValue="Container();" alwaysStopAt="true" />
    <context />
  </template>
</templateSet>